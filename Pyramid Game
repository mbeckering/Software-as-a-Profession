'''
Author:
    Michael Beckering
    Project Created: 8/29/18
    Due Date: 9/5/18
    FS18-CS4500-E01 - Introduction to the Software Profession
    Homework 2
Environment:
    Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]
    PyCharm 2018.2.2 (Community Edition)
    Build #PC-182.4129.34, built on August 21, 2018
    JRE: 1.8.0_152-release-1248-b8 amd64
    JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o
    Windows 10 10.0
Sources used during development:
In-class lecture
https://www.programiz.com/python-programming/global-local-nonlocal-variables

External Files:
    HW2beckeringOutfile.txt
    This output file receives all of the same info that is printed on screen:
    Brief explanation of how the pyramid game works, all the nodes in the
    order they are visited, and finally a summary of statistics of the game
    This file is created or overwritten each time the program is run.

About:

           PYRAMID GAME

               [1]
            [2]  [3]
         [4]  [5]  [6]
      [7]  [8]  [9]  [10]
   [11] [12] [13] [14] [15]
[16] [17] [18] [19] [20] [21]

This game is a traversal of the pyramid picture above. We start at [1], mark it as visited (hit),
and roll a 4-sided die [1-4]
1: Upper Left (UL)
2: Upper Right (UR)
3: Lower Left (LL)
4: Lower Right (LR)

This die roll determines the direction to make our first move. If we roll a 1 (UL) or 2 (UR)
on our frist roll whle sitting at node [1], as there is no node to move to in those directions,
we count this as a "move", but we stay at node [1] and mark it as visited (hit) for a second time.
If we roll a 3 (LL), we will move to node [2], mark it as hit, and roll the die again.

This process continues until each node has been hit at least once. You will see each node displayed
on the screen in the order they are visited, followed by some statistics when the game has ended.
'''

#importing random package for rolling of our 4-sided die
import random

# GLOBAL VARIABLES

next_node = 0
current_node = 0
move_count = 0

#each element in the list called "node" will be a list of integers that contains the data for each node
node = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]

#node[0] is unused
#node[1] will represent node 1 on our pyramid
node[1] = [0, 0, 0, 2, 3]
#node[1][0] is the number of hits on node 1
#node[1][1] is the link on the UPPER LEFT (0 = no link)
#node[1][2] is the link on the UPPER RIGHT (0, again, no link)
#node[1][3] is the link on the LOWER LEFT (links to node 2)
#node[1][4] is the link on the LOWER RIGHT (links to node 3)
#summary: node[x] = [hits, UL, UR, LL, LR]

#below are the declarations to describe out pyramid of numbers
#first row has 1 element, declared above, with the value 1
#second row has 2 elements, 2 and 3, 3rd row has 3 elemets, 4 through 6, and so on
#last row has 6 elements, 16 through 21, which is why all of their LL and LR values are zero

node[2] = [0, 0, 1, 4, 5]
node[3] = [0, 1, 0, 5, 6]
node[4] = [0, 0, 2, 7, 8]
node[5] = [0, 2, 3, 8, 9]
node[6] = [0, 3, 0, 9, 10]
node[7] = [0, 0, 4, 11, 12]
node[8] = [0, 4, 5, 12, 13]
node[9] = [0, 5, 6, 13, 14]
node[10] = [0, 6, 0, 14, 15]
node[11] = [0, 0, 7, 16, 17]
node[12] = [0, 7, 8, 17, 18]
node[13] = [0, 8, 9, 18, 19]
node[14] = [0, 9, 10, 19, 20]
node[15] = [0, 10, 0, 20, 21]
node[16] = [0, 0, 11, 0, 0]
node[17] = [0, 11, 12, 0, 0]
node[18] = [0, 12, 13, 0, 0]
node[19] = [0, 13, 14, 0, 0]
node[20] = [0, 14, 15, 0, 0]
node[21] = [0, 15, 0, 0, 0]

# FUNCTION DEFINITIONS

#visitNode() accepts a node number, marks it as visitied, and updates global variables accordingly
def visitNode(n):
    #refer to these global variables inside this function
    global current_node
    global node
    global move_count
    #print the preceding comma before this node visit if this isn't the first move
    if (move_count != 0):
        print(", ", end="")
        output_file.write(", ")

    #print this node visit to stdout and output file
    print("%i" % n, end="")
    output_str = "%i" % n
    output_file.write(output_str)
    #update the current node global variable
    current_node = n
    #increment the number of hits on this node
    node[n][0] += 1
    #increment total number of moves in the game
    move_count += 1

#findAdjacentNode accepts an int (current node) and rolls to find an adjacent node
#returns the number of a valid adjacent node, or returns 0 if an invalid direction is rolled
def findAdjacentNode(n):
    #roll from 1-4 (1 = UL, 2 = UR, 3 = LL, 4 = LR)
    roll = random.randint(1, 4)
    #if the roll does not return an invalid move (invalid moves are 0 in our node list)
    if (node[n][roll] != 0):
        #return the node number that we will visit next
        return node[n][roll]
    #if it is an invalid node, count it as a visit to this node again
    else:
        visitNode(n)
        return 0

#gameOver() returns 1 if the game has ended (all nodes have been visited at least once), else 0
def gameOver():
    #refer to the node global variable inside this function
    global node
    x = 1 #iterator
    #check each node
    while(x <= 21):
        #if any node is unvisited, return 0 (game not over)
        if (node[x][0] == 0):
            return 0
        x += 1

    #if this point is reached, all 21 nodes have been visited
    return 1

#reportStats() calculates and reports statistics from the game
def reportStats():
    #refer to these global variables inside this function
    global node
    global move_count
    #number of moves is truly one fewer than the number of dots, so correct that here by decrementing by 1
    move_count -= 1
    print("Total number of moves: %i" % move_count)
    output_str = "Total number of moves: %i\n" % move_count
    output_file.write(output_str)

    #this loop finds the node or nodes with the most hits
    x = 1 #iterator
    max_hits = 0
    max_nodes= [] #empty list to store potential multiple maximum hit nodes
    while(x <= 21):
        #update max node if current node has more than previous max
        if (node[x][0] > max_hits):
            max_hits = node[x][0]
            #clear the list since we now have a single leader for max node hits
            del max_nodes
            max_nodes = []
            #start the list anew with this node
            max_nodes.append(x)
        #if we have a tie for max nodes, append it to the list of max hit nodes
        elif (node[x][0] == max_hits):
            max_nodes.append(x)
        x += 1

    #calculate and display average hits per node and node with max hits
    avg_hits = (float)(move_count / 21)
    print("Average number of hits per node: %0.3f" % avg_hits)
    output_str = "Average number of hits per node: %0.3f\n" % avg_hits
    output_file.write(output_str)

    #if we have a tie for max nodes, report them all
    if(len(max_nodes) > 1):
        print("Nodes tied for a maximum hit count of %i: " % (max_hits), end="")
        output_str = "Nodes tied for a maximum hit count of %i: " % (max_hits)
        output_file.write(output_str)
        i = 1 #iterator to keep track of where we are in our list to print a period after the last element.
        #reporting each of the tied max nodes, then a comma or a period depending on if we're on the last element
        for x in max_nodes:
            print("%i" % x, end="")
            output_str = "%i" % x
            output_file.write(output_str)
            if (i < len(max_nodes)):
                print(", ", end="")
                output_file.write(", ")
            elif (i == len(max_nodes)):
                print(".")
                output_file.write(".\n")
            i+=1
    else:
        print("Node %i had the most hits with %i\n" % (max_nodes[0], max_hits))
        output_str = "Node %i had the most hits with %i\n" % (max_nodes[0], max_hits)
        output_file.write(output_str)

#printInfo() prints a game description to stdout and to the output file
def printInfo():
    print("PYRAMID GAME:")
    print("Picture a pyramid of numbers 1 through 21, 1 at the top, 2 and 3 in the second row,")
    print("4 through 5 in the third row, and so on, with 16 through 21 in the bottom row.")
    print("We will start at [1] at the top and move in a random direction to an adjacent node")
    print("on the pyramid. If we attempt to move outside the pyramid, we will count that as")
    print("another visit (hit) to the node we're currently on, then try to move again.")
    print("The game is over when all nodes have been hit at least once.\n")
    print("As we traverse the pyramid, you will see each node we hit in order. Let's begin!\n")
    output_file.write("PYRAMID GAME\n")
    output_file.write("Picture a pyramid of numbers 1 through 21, 1 at the top, 2 and 3 in the second row,\n")
    output_file.write("4 through 5 in the third row, and so on, with 16 through 21 in the bottom row.\n")
    output_file.write("We will start at [1] at the top and move in a random direction to an adjacent node\n")
    output_file.write("on the pyramid. If we attempt to move outside the pyramid, we will count that as\n")
    output_file.write("another visit (hit) to the node we're currently on, then try to move again.\n")
    output_file.write("The game is over when all nodes have been hit at least once.\n\n")
    output_file.write("As we traverse the pyramid, you will see each node we hit in order. Let's begin!\n\n")

# MAIN PROGRAM

#open output file, create / overwrite
output_file = open("HW2beckeringOutfile.txt", 'w')

#output game explanation to stdout and to the output file
printInfo()

#start the game by visiting node 1
next_node = 1
visitNode(next_node)

#Main loop. Check if the game has ended at the start.
while not(gameOver()):
    #set next_node to zero in order to enter the while loop
    next_node = 0
    #keep trying to roll for a valid adjacent node to visit until one is found
    while (next_node == 0):
        next_node = findAdjacentNode(current_node)

    #When this point is reached, a valid adjacent node has been found. Visit it.
    visitNode(next_node)

#When this point is reached, the game has ended. Put a period at the end of the numbers, then a blank line.
print(".\n")
#need to specify two newlines for the output file: one for newline after numbers and one for a blank line.
output_file.write(".\n\n")

#calculate and display statistics
reportStats()

#close output file stream
output_file.close()

exit(0)
